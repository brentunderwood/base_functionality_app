plugins {
    id 'com.android.application'
}

android {
    namespace 'com.example.base_functionality_app'
    compileSdk 33

    defaultConfig {
        applicationId "com.example.base_functionality_app"
        minSdk 26
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        ndkBuild {
            path file('src/main/cpp/Android.mk')
        }
    }
}

dependencies {

    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.9.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    implementation 'com.caverock:androidsvg:1.4'
    implementation 'androidx.sqlite:sqlite:2.1.0'

}

// Copy Stockfish executables to assets directory
task copyToJniLibs(type: Copy, dependsOn: 'externalNativeBuildRelease') {
    from('build/intermediates/ndkBuild/release/obj/local') {
        include '*/libstockfish'
        include '*/libstockfish_nosimd'
    }
    into 'src/main/jniLibs'

    eachFile { FileCopyDetails fileDetails ->
        def fileName = fileDetails.name + '.so'
        fileDetails.path = fileDetails.path.replace(fileDetails.name, fileName)
    }
}

tasks.withType(JavaCompile) {
    t -> t.dependsOn copyToJniLibs
}

android {
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}JniLibFolders"]
                .dependsOn(copyToJniLibs)
    }
}
